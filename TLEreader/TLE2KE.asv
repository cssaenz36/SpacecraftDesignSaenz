% The following code was taken from the TLEreader repository built by the TAs
% Additions were made in order to complete the assignment

% Two-line element set
close all; clear all; clc

mu = 398600; %  Standard gravitational parameter for the earth

% TLE file name
fname = 'TLE.txt';

% Open the TLE file and read TLE elements
fid = fopen(fname, 'rb');
L1c = fscanf(fid,'%69c',1); % L1c contains the first line of the TLE as CHARACTERS
L2c = fscanf(fid,'%69c',1);  % L2c contains the second line of the TLE as Characters

% Close the TLE file
fclose(fid);

% EXAMPLE: inclination is located on character count 09-16 in Line 2 of the TLE. https://en.wikipedia.org/wiki/Two-line_element_set "WikiPEdia Is NOt a CrEDIble SOUrcE"
inc = str2num(L2c(1,9:16));

% Additional parameters
RAAN = str2num(L2c(1,18:25)); % right ascension of the ascending node
ecc = str2num(L2c(1,27:33)); % eccentricity
argPeri = str2num(L2c(1,35:42)); % argument of perigee
M = str2num(L2c(1,44:51)); % mean anomoly
n = str2num(L2c(1,53:63)); % mean motion


% Calculating the true anomaly requires Newton Rhapson mehtod, uncomment the following to calculate true anomaly from Eccentric anomaly (E)
% Calculate the eccentric anomaly using Mean anomaly (M). True anomaly can then be calculated form the Eccentric Anomaly.

err = 1e-10;            %Calculation Error
E0 = M; t =1;
itt = 0;
while(t)
       E =  M + ecc*sind(E0);
      if ( abs(E - E0) < err)
          t = 0;
      end
      E0 = E;
      itt = itt+1;
end
trueAnom = acosd((cosd(E)-ecc)/(1-ecc*cosd(E)));

% Calculating position and velocity vector in ECI
a = (mu/(n^2))^(1/3); % semi-major axis
r = (a*(1-ecc^2)) / (1+ecc*cosd(trueAnom)); % |r| in orbital plane (km)

% Defining r and v vectors in orbital plane
rVec = [r*cosd(trueAnom); r*sind(trueAnom); 0];
vVec = [sqrt(mu/(a*(1-ecc^2)))*(-sind(trueAnom)); sqrt(mu/(a*(1-ecc^2)))*(ecc+cosd(trueAnom)); 0];

% Defining rVec and vVec in ECI using passive rotation
rVec_ECI = [cosd(-RAAN) -sind(-RAAN) 0; sind(-RAAN) cosd(-RAAN) 0; 0 0 1]*[1 0 0; 0 cosd(-inc) -sind(-inc); 0 sind(-inc) cosd(-inc)]*[cosd(-argPeri) -sind(-argPeri) 0; sind(-argPeri) cosd(-argPeri) 0; 0 0 1]*rVec;
vVec_ECI = [cosd(-RAAN) -sind(-RAAN) 0; sind(-RAAN) cosd(-RAAN) 0; 0 0 1]*[1 0 0; 0 cosd(-inc) -sind(-inc); 0 sind(-inc) cosd(-inc)]*[cosd(-argPeri) -sind(-argPeri) 0; sind(-argPeri) cosd(-argPeri) 0; 0 0 1]*vVec;
